#= require application
#= require risk_tracker
#= require_tree ./../../fixtures

describe "RiskTracker.Models.GamePlayer", ()->

  describe "territoryCount", ()->
    it "should return the number of territories a player has", ()->
      game_player = new RiskTracker.Models.GamePlayer(territory_count: 20)

      expect(game_player.territoryCount()).toEqual(20)

  describe "energy", ()->
    describe "faction other than The Fusion Conservancy", ()->
      it "should return the amount of energy the game player is collecting", ()->
        game_player = new RiskTracker.Models.GamePlayer(territory_count: 12)

        expect(game_player.energy()).toEqual(4)

    describe "The Fusion Conservancy", ()->
      it "should return the amount of energy the game player is collecting, rounded up 20%", ()->
        faction = _(factions).detect (f)-> f.name is 'The Fusion Conservancy'
        game_player = new RiskTracker.Models.GamePlayer(territory_count: 12, faction: faction)

        expect(game_player.energy()).toEqual(5)

    describe "with a continental bonus", ()->
      it "should include the bonus energy", ()->
        game        = new RiskTracker.Models.Game(newGameData)
        continent   = game.maps.models[0].continents.models[0]
        game_player = game.gamePlayers.models[0]
        game_player.addContinent(continent)

        expect(game_player.energy()).toEqual(11)

  describe "units", ()->
    describe "faction other than MegaCorp", ()->
      it "should return the amount of units the game player is collecting", ()->
        game_player = new RiskTracker.Models.GamePlayer(territory_count: 12, space_stations: 0)

        expect(game_player.units()).toEqual(4)

    describe "MegaCorp", ()->
      it "should return the amount of units the game player is collecting, rounded up 20%", ()->
        faction = _(factions).detect (f)-> f.name is 'MegaCorp'
        game_player = new RiskTracker.Models.GamePlayer(territory_count: 12, space_stations: 0, faction: faction)

        expect(game_player.units()).toEqual(5)

    describe "Space Station bonus", ()->
      describe "faction other than Preservation with a space station", ()->
        it "should add 1 unit for each space station the player possesses", ()->
          faction = _(factions).detect (f)-> f.name is 'Gayans'

          game_player = new RiskTracker.Models.GamePlayer(territory_count: 12, space_stations: 1, faction: faction)

          expect(game_player.units()).toEqual(5)

      describe "Preservation", ()->
        it "should double the number of units generated by each space station", ()->
          faction = _(factions).detect (f)-> f.name is 'Preservation'
          game_player = new RiskTracker.Models.GamePlayer(territory_count: 12, space_stations: 2, faction: faction)

          expect(game_player.units()).toEqual(8)

    describe "with a continental bonus", ()->
      it "should include the bonus units", ()->
        game        = new RiskTracker.Models.Game(newGameData)
        continent   = game.maps.findContinentById("4f9aabea60e6511004000002") ## North America
        game_player = game.gamePlayers.models[0]
        game_player.addContinent(continent)

        expect(game_player.units()).toEqual(13)
